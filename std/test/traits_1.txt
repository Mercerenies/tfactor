
trait Silly end

trait Eq
  type t
  fun == ( Self.t Self.t -- Bool ) # TODO Get rid of the Self here; i.e. make it implied
end

trait Ord
  include Eq
  fun lt ( Self.t Self.t -- Bool )
end

mod IntIsOrd
  require Ord
  mod t = Int end

  fun == ( Int Int -- Bool )
    Prelude.=
  end

  fun lt ( Int Int -- Bool )
    Prelude.<
  end

end

record Tuple2
  constructor make
  field proj1 of Int
  field proj2 of Int
end


mod Tuple2IsEq
  require Eq
  mod t = Tuple2.t end

  fun == ( Tuple2.t Tuple2.t -- Bool )
    [ [ Tuple2.proj1 ] [ Tuple2.proj1 ] bi* IntIsOrd.== ]
    [ [ Tuple2.proj2 ] [ Tuple2.proj2 ] bi* IntIsOrd.== ]
    bi2 and
  end

end

fun test ( -- Bool )
  10 20 Tuple2.make 10 20 Tuple2.make Tuple2IsEq.==
  10 20 Tuple2.make 20 10 Tuple2.make Tuple2IsEq.== not
  and
end
