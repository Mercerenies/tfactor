
trait Silly end

trait Eq { X : Type }
  val == ( X X -- Bool )
end

trait Ord { X : Type }
  include Eq { X }
  val lt ( X X -- Bool )
end

mod IntIsOrd
  require Ord { Int }

  fun == ( Int Int -- Bool )
    Prelude.=
  end

  fun lt ( Int Int -- Bool )
    Prelude.<
  end

end

record Tuple2
  constructor make
  field proj1 Int
  field proj2 Int
end

mod Tuple2IsEq
  require Eq { Tuple2 }

  fun == ( Tuple2 Tuple2 -- Bool )
    [ [ Tuple2.proj1 ] [ Tuple2.proj1 ] bi* IntIsOrd.== ]
    [ [ Tuple2.proj2 ] [ Tuple2.proj2 ] bi* IntIsOrd.== ]
    bi2 and
  end

end

fun test ( -- Bool )
  10 20 Tuple2.make 10 20 Tuple2.make Tuple2IsEq.==
  10 20 Tuple2.make 20 10 Tuple2.make Tuple2IsEq.== not
  and
end
