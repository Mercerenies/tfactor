
# As with many of the HasType test cases, this isn't how you would
# idiomatically express this in the language, as it's more convenient
# and sensible to just have a parameterized type directly. But HasType
# does make for useful test cases.

trait HasType
  type t
end

mod ContainsTwoOf { F : HasType }
  type t
    | Instance of ( F.t F.t )
end

mod HasString mod t = String end end
mod HasInt mod t = Int end end
mod TwoString = ContainsTwoOf { HasString } end
mod TwoInt = ContainsTwoOf { HasInt } end

fun drop-string ( String -- )
  drop
end

fun test ( -- Bool )
  "foo" "bar" TwoString.Instance [ drop-string drop-string ] TwoString.*t
  10 20 TwoInt.Instance [ 20 = swap 10 = and ] TwoInt.*t
end
