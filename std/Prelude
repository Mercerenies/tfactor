# -*- Text -*-

alias P = Primitives

mod Int = P.Int end
mod Nothing = P.Nothing end
mod Bool = P.Bool end
mod String = P.String end
mod Symbol = P.Symbol end

# TODO I may choose to hide *Void and *Unit later, as they're just
# id and call, respectively. There's no facility to hide them right
# now, but let's not get dependent on them.

type Void

type Unit | U of ( )

fun drop ( 'a -- )
  P.drop
end

fun drop2 ( 'a 'b -- )
  drop drop
end

fun drop3 ( 'a 'b 'c -- )
  drop2 drop
end

fun nip ( 'a 'b -- 'b )
  swap drop
end

fun nip2 ( 'a 'b 'c -- 'c )
  nip nip
end

fun nip3 ( 'a 'b 'c 'd -- 'd )
  nip2 nip
end

fun dup ( 'a -- 'a 'a )
  P.dup
end

fun dup2 ( 'a 'b -- 'a 'b 'a 'b )
  over over
end

fun dup3 ( 'a 'b 'c -- 'a 'b 'c 'a 'b 'c )
  pick pick pick
end

fun over ( 'a 'b -- 'a 'b 'a )
  P.over
end

fun over2 ( 'a 'b 'c -- 'a 'b 'c 'a 'b )
  pick pick
end

fun pick ( 'a 'b 'c -- 'a 'b 'c 'a )
  P.pick
end

fun id ( -- )
end

fun swap ( 'a 'b -- 'b 'a )
  P.swap
end

fun dupd ( 'a 'b -- 'a 'a 'b )
  [ dup ] dip
end

fun swapd ( 'a 'b 'c -- 'b 'a 'c )
  [ swap ] dip
end

fun rot ( 'a 'b 'c -- 'b 'c 'a )
  P.rot
end

fun unrot ( 'a 'b 'c -- 'c 'a 'b )
  rot rot
end

fun dip ( 'S 'a ( 'S -- 'T ) -- 'T 'a )
  P.dip
end

fun dip2 ( 'S 'a 'b ( 'S -- 'T ) -- 'T 'a 'b )
  swap [ dip ] dip
end

fun dip3 ( 'S 'a 'b 'c ( 'S -- 'T ) -- 'T 'a 'b 'c )
  swap [ dip2 ] dip
end

fun dip4 ( 'S 'a 'b 'c 'd ( 'S -- 'T ) -- 'T 'a 'b 'c 'd )
  swap [ dip3 ] dip
end

fun keep ( 'S 'a ( 'S 'a -- 'T ) -- 'T 'a )
  [ dup ] dip dip
end

fun keep2 ( 'S 'a 'b ( 'S 'a 'b -- 'T ) -- 'T 'a 'b )
  [ dup2 ] dip dip2
end

fun keep3 ( 'S 'a 'b 'c ( 'S 'a 'b 'c -- 'T ) -- 'T 'a 'b 'c )
  [ dup3 ] dip dip3
end

fun bi ( 'S 'a ( 'S 'a -- 'T ) ( 'T 'a -- 'U ) -- 'U )
  [ keep ] dip call
end

fun bi2 ( 'S 'a 'b ( 'S 'a 'b -- 'T ) ( 'T 'a 'b -- 'U ) -- 'U )
  [ keep2 ] dip call
end

fun bi3 ( 'S 'a 'b 'c ( 'S 'a 'b 'c -- 'T ) ( 'T 'a 'b 'c -- 'U ) -- 'U )
  [ keep3 ] dip call
end

fun tri ( 'S 'a ( 'S 'a -- 'T ) ( 'T 'a -- 'U ) ( 'U 'a -- 'V ) -- 'V )
  [ keep ] dip2 [ keep ] dip call
end

fun tri2 ( 'S 'a 'b ( 'S 'a 'b -- 'T ) ( 'T 'a 'b -- 'U ) ( 'U 'a 'b -- 'V ) -- 'V )
  [ keep2 ] dip2 [ keep2 ] dip call
end

fun tri3 ( 'S 'a 'b 'c ( 'S 'a 'b 'c -- 'T ) ( 'T 'a 'b 'c -- 'U ) ( 'U 'a 'b 'c -- 'V ) -- 'V )
  [ keep3 ] dip2 [ keep3 ] dip call
end

fun bi* ( 'S 'a 'b ( 'S 'a -- 'T ) ( 'T 'b -- 'U ) -- 'U )
  [ dip ] dip call
end

fun bi2* ( 'S 'a 'b 'c 'd ( 'S 'a 'b -- 'T ) ( 'T 'c 'd -- 'U ) -- 'U )
  [ dip2 ] dip call
end

fun tri* ( 'S 'a 'b 'c ( 'S 'a -- 'T ) ( 'T 'b -- 'U ) ( 'U 'c -- 'V ) -- 'V )
  [ dip2 ] dip2 [ dip ] dip call
end

fun tri2* ( 'S 'a 'b 'c 'd 'e 'f ( 'S 'a 'b -- 'T ) ( 'T 'c 'd -- 'U ) ( 'U 'e 'f -- 'V ) -- 'V )
  [ dip4 ] dip2 [ dip2 ] dip call
end

fun call ( 'S ( 'S -- 'T ) -- 'T )
  P.call
end

fun if ( 'S Bool ( 'S -- 'T ) ( 'S -- 'T ) -- 'T )
  P.if
end

fun + ( Int Int -- Int )
  P.+
end

fun - ( Int Int -- Int )
  P.-
end

fun * ( Int Int -- Int )
  P.*
end

fun / ( Int Int -- Int )
  P./
end

fun = ( Int Int -- Bool )
  P.=
end

fun != ( Int Int -- Bool )
  P.!=
end

fun < ( Int Int -- Bool )
  P.<
end

fun > ( Int Int -- Bool )
  P.>
end

fun <= ( Int Int -- Bool )
  P.<=
end

fun >= ( Int Int -- Bool )
  P.>=
end

fun and ( Bool Bool -- Bool )
  [ ] [ drop false ] if
end

fun or ( Bool Bool -- Bool )
  [ drop true ] [ ] if
end

fun not ( Bool -- Bool )
  [ false ] [ true ] if
end

fun xor ( Bool Bool -- Bool )
  [ not ] [ ] if
end

fun andthen ( 'S ( 'S -- 'T Bool ) ( 'T -- 'T Bool ) -- 'T Bool )
  [ call ] dip [ false ] if
end

fun orelse ( 'S ( 'S -- 'T Bool ) ( 'T -- 'T Bool ) -- 'T Bool )
  [ call ] dip [ true ] swap if
end
