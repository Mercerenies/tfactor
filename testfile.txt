
# These are some comments at
# the top of the file.

mod MyModule

  fun drop2 ( Any Any -- )
    drop drop
  end

  mod MyNestedModule

    fun drop2-again ( Any Any -- )
      MyModule.drop2
    end

  end

end

mod MyTestModule1

  fun foobar ( Any -- )
    drop
  end

end

# My module likes to go by "Joe" :)
alias Joe = MyModule
alias charlie = Joe.drop2

alias MyTestModule2 = MyTestModule1
open MyTestModule2

fun my-swap ( 'd 'c -- 'c 'd )
  swap
end

fun string-output ( -- String )
  "Hello, world!"
end

fun a-silly-loop-2 ( -- )
  a-silly-loop-1
end

fun a-silly-loop-1 ( -- )
  a-silly-loop-2
end

macro do-it-twice ( Symbol -- Symbol Symbol )
  dup
end

fun doesn't-actually-do-anything ( -- )
  "A" drop
  "B" "C" drop2
  "D" "E" "F" drop3
end

# Do not call this function unless you like seeing programs
# crash at runtime :)
fun absurd-function ( -- Int Int )
  "These are quite obviously not integers."
  "Very, very, obviously."
  Primitives.unsafe
end

# Here's a comment before main.

fun main ( -- Int Int Int Int Int String Int Symbol Symbol Symbol Symbol Symbol Symbol Int Int Int Int Int Int Int Int Int Int Int Int Int Int )
  500 3 nip
  500 500 2 nip2
  500 500 500 1 nip3
  id id id id id # Because why not?
  doesn't-actually-do-anything
  true [ my-swap ] [ ] if
  [ 3 4 5 + do-it-twice ] call
  [ 3 4 + ] Prelude.call
  string-output # Here's a comment at the end of a line.
  100 200 300 400 500 MyModule.drop2 MyModule.MyNestedModule.drop2-again
  999999 999999 Joe.drop2
  999999 999999 charlie
  999999 foobar
  999999 999999 __root.MyModule.drop2
  :abc :def :ghi :jkl drop do-it-twice
  :first :second dup2
  600 700 800 dup3
  1000 2000 over
  1000 2000 3000 over2
end
