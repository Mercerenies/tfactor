
* GENERAL THOUGHTS
** Functors
  + /sigh/ Functors. It's gonna be big, and it's gonna be messy, but we
    gotta do it. Here, I mean "Functor" in the OCaml way, in the sense
    of parameterized module, not in the Haskell way.
  + This depends on module types. We need to be able to define module
    types, so that modules can map to them.
    - Nominal or structural?
      * OCaml goes structural, which seems to be a smarter choice.
      * Maybe have an option to explicitly turn on nominal typing for a
        given module. I will admit it is sometimes useful, especially
        for typeclass-style stuff if there's a possibility of
        accidental overlap.
  + Unlike in OCaml, modules should probably be able to take types as
    arguments in addition to modules, since we're using modules to
    represent data.
*** Syntax Thoughts
 + We put parameter names in braces after the module name.
#+BEGIN_SRC
mod Foo { Argument }
  # In here, Argument is a module that's available
end
#+END_SRC
   - Issue: How do we specify the type of the argument?
** Module Synonyms
  + Aliases deal with the problem locally, but what if we want to "export" an alias?
    - For functions, we can currently just redefine the function and,
      eventually (once we write an inliner), it'll be inlined. Maybe
      we'll define a nicer way later, but for now that suffices.
    - Can't currently be done for modules. Need a way to say "make this
      module equal this other one and export it".
** Visibility Modifiers
  + Everything is public right now.
  + I'm thinking we go public and private access. Things are public by
    default but can be made private with a keyword.
    - Private names can only be used in the current module and any
      modules contained strictly therein.
    - Anything can be marked private, including but not limited to:
      Functions, macros, modules, records, record constructors, record
      fields.
** Record Stuff
  + There's a bit of refinement that needs doing with records. For
    one, it should be an error if you don't define any constructor,
    even a private one, as a type that can never be constructed is
    worthless. If you want an uninhabited type, you shouldn't be using
    records, as even the empty product is inhabited.
** Data Declarations
  + Sum of product types.
  + As with records, we get a module "for free" which represents the
    type.
  + The names of the various constructors are inside the module.
  + Some sort of master "pattern matching" function which takes a
    bunch of quotations and folds around the data, kind of like
    ~maybe~ or ~either~ do for the respective data types in Haskell.
** Arrays
  + Don't forget that we still don't have arrays. Need to decide on
    the syntax and lots of stuff for those.
** Error Messages
   I know it to be true but I might as well write it down here to be
   sure. Error messages are /awful/ right now. They need to be vastly
   improved.
   + Parser errors are actually quite good, because they come from
     parsec. No major action need be taken there.
   + Errors should show where they came from: at the very least a name
     of module or function, and ideally a line number.
   + Some errors are being overused, such as ~NoSuchFunction~.
   + Lots of errors don't convey enough information, like
     ~NotAFunction~ or ~NotAModule~.
   + Generally, errors need to be prettied up in the form they show to
     the user, even when they do technically convey the right info.
   + Internal errors probably shouldn't nest.
** Duplicate Declarations
   Obvious duplicates are caught, but after including modules in other
   modules and renaming modules and whatnot, we need a check for dups
   that happens right after a given module loads (possibly even during
   the load step).
   + Remember, dup aliases are not a problem unless they're used (to
     make it easier and less obnoxious to mass-import things)
   + Also, duplicate names in a trait aren't an issue as long as the
     type signatures coincide (we do need to make a merge step on this
     when including traits in other traits; right now it technically
     works, I think, but is awkward)
** Top-Level Module
   Lots of awkwardness here. It's not a "real" module which
   complicates things. For one, it's never actually module loaded,
   which means module synonyms and functor instantiations at the top
   level just... fail silently. How do we deal with this?
* WHEN ARE TYPES COMPATIBLE?
  This may be a bit complicated, so I'm writing it down here. When you
  have a functor which constitutes a type (usually, a parameterized
  record), that functor also constitutes a (parameterized) type. When
  you instantiate the functor and get a module, that module /also/
  constitutes a type, which is a subtype of the functor with the
  appropriate parameters. Note that two identical instantiations of a
  functor with the same arguments produce two distinct subtypes of the
  functor type which are identical in representation but incompatible.

  + Note that, right now, this does not apply to /nested/ types inside
    a functor. Two instantiations of a functor which contains nested
    types will produce two distinct, unrelated nested types. This
    behavior is likely to stay, as it's quite useful to be able to
    "generate" distinct types with the same representation at
    compile-time.
* TRAITS AND MODULE PARAMETERS PLAN
 1. [X] ~ResourceTable~ transition
 2. [X] Module synonyms that are exported
 3. [-] All types are modules
    + [X] Types need to resolve to canonical names
    + [X] Primitive types are modules
    + [ ] Function types are modules
 4. [-] Traits
    + [X] New declaration
    + [X] New ~ReaderValue~ possibility
    + [X] A way to verify that a module satisfies a trait
    + [X] Syntactic assertion, i.e. ~require~
    + [ ] Traits are modules (??)
    + [ ] Alternatively, trait synonyms (??)
    + [X] Trait includes
    + [X] While we're at it, module includes
 5. [X] Parameterized traits
    + [X] Parameterization
    + [X] Syntax: ~trait~ declarations can take parameters
    + [X] Syntax: ~require~ declarations can take parameters
    + [X] Syntax: ~include~ declarations can take parameters
 6. [-] Parameterized modules
    + [X] Declaring functors
    + [X] Parameterization
    + [X] Actualizing functors into modules
    + [X] Type checking inside of a functor
    + [X] Ability to have nested functors
    + [ ] Normalize the type names to behave more intuitively
    + [ ] A functor should depend on anything its inner declarations
      depend on (for module loading)
    + [ ] Need to pay special attention to aliases inside a functor to
      other names defined inside that functor, because they have to
      expand to names that don't yet exist
    + [X] Parameterized records
    + [ ] Module args can depend on earlier module args, so we can do
      typeclass-ish stuff
    + [ ] Module load order is awkward now, because a functor can't be
      instantiated in the same module is was declared
 7. [ ] Functions can take module arguments
** SIDE PLAN
 + [X] Remove trait ~Type~
 + [X] Type resources store their argument count
 + [X] Traits can demand types that take a specific number of args
 + [ ] (Test the above with args)
 + [ ] Functors can have types in them
 + [ ] Recover test cases, as much as possible
 + [ ] Canonical list type? (or is this out of scope for ~new-user-defined-types~?)
